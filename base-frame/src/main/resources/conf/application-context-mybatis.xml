<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- ========================================配置数据源========================================= -->
    <!-- 配置c3p0数据源 -->
    <bean id="c3p0dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="50"/>
        <!--连接池中保留的最小连接数。-->
        <property name="minPoolSize" value="1"/>
        <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize" value="10"/>
        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="30"/>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="5"/>
         <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
            属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
          如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
        <property name="maxStatements" value="0"/>
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod" value="60"/>
        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
        <property name="acquireRetryAttempts" value="30"/>
        <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
          保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
          获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
        <property name="breakAfterAcquireFailure" value="true"/>
        <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
          时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
          等方法来提升连接测试的性能。Default: false -->
        <property name="testConnectionOnCheckout" value="false"/>
    </bean>


    <!-- ========================================分隔线========================================= -->

    <!-- ========================================针对myBatis的配置项============================== -->
    <!-- 配置sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->
        <property name="dataSource" ref="c3p0dataSource"/>
        <!-- 自动扫描com/vivian/web/mybatis/mapper目录下的所有SQL映射的xml文件, 省掉Configuration.xml里的手工配置
        value="classpath:com/vivian/web/mybatis/mapper/*.xml"指的是classpath(类路径)下com.vivian.web.mybatis.mapper包中的所有xml文件
        UserDao.xml位于com/vivian/web/mybatis/mapper/包下，这样UserMapper.xml就可以被自动扫描
         -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath*:modules/*/mapper/*.xml"/>
    </bean>
    <!-- ========================================分隔线========================================= -->

    <!-- 配置sqlSessionTemplate -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype" >
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <!-- 配置Spring的事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="c3p0dataSource"/>
    </bean>


    <!-- 注解方式配置事物 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>


    <!-- 面向切片方式配置事务 -->
    <!--   <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
           <tx:attributes>
               <tx:method name="add*" propagation="REQUIRED" />
               <tx:method name="append*" propagation="REQUIRED" />
               <tx:method name="insert*" propagation="REQUIRED" />
               <tx:method name="save*" propagation="REQUIRED" />
               <tx:method name="update*" propagation="REQUIRED" />
               <tx:method name="modify*" propagation="REQUIRED" />
               <tx:method name="edit*" propagation="REQUIRED" />
               <tx:method name="delete*" propagation="REQUIRED" />
               <tx:method name="remove*" propagation="REQUIRED" />
               <tx:method name="repair" propagation="REQUIRED" />
               <tx:method name="delAndRepair" propagation="REQUIRED" />

               <tx:method name="get*" propagation="SUPPORTS" />
               <tx:method name="find*" propagation="SUPPORTS" />
               <tx:method name="load*" propagation="SUPPORTS" />
               <tx:method name="search*" propagation="SUPPORTS" />
               <tx:method name="datagrid*" propagation="SUPPORTS" />

               <tx:method name="*" propagation="SUPPORTS" />
           </tx:attributes>
       </tx:advice>
       <aop:config>
           <aop:pointcut id="transactionPointcut" expression="execution(* com.vivian.web..*Impl.*(..))" />
           <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
       </aop:config>-->

    <!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.joker.modules.*.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>


</beans>